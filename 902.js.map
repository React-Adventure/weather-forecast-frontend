{"version":3,"file":"902.js","mappings":"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","sources":["webpack://weather-forecast-frontend/./src/utils/responsiveLineProps.js","webpack://weather-forecast-frontend/./src/components/DigitalClock.js","webpack://weather-forecast-frontend/./src/components/HourlyChart.js","webpack://weather-forecast-frontend/./src/utils/API.js"],"sourcesContent":["import React from \"react\";\nimport { DotsItem } from '@nivo/core';\n\nconst customPoint = (props) => {\n  const { currentPoint, pointBorderWidth, pointColor, points, pointSize, pointSymbol, pointLabelYOffset } = props;\n  //console.log('Chart points props: ', props);\n\n  return (points.map((point, ind, arr) => { \n    let dotShadow = null;\n\n    if(\n      ind % 4 === 0 ||\n      ind === 0 || \n      ind === (arr.length - 1) ||\n      (currentPoint !== null && point === currentPoint)\n    ) {\n      dotShadow = \n        <circle \n          fill={pointColor} \n          r={3} \n          strokeWidth={pointBorderWidth + 5} \n          stroke={pointColor} \n          strokeOpacity={0.35} \n          cx={point.x}\n          cy={point.y}\n        />;\n    }\n    \n    return (\n      <g key={point.id}>\n        {dotShadow}\n        <DotsItem\n          key={point.id}\n          x={point.x}\n          y={point.y}\n          datum={point.data}\n          symbol={pointSymbol}\n          size={pointSize}\n          color={point.color}\n          borderWidth={pointBorderWidth}\n          borderColor={pointColor}\n          label={dotShadow ? point.data.yFormatted : null}\n          labelYOffset={pointLabelYOffset}\n        />\n    </g>\n    )\n  }));\n};\n\nconst responsiveLineProps = {\n  theme: {\n    fontFamily: 'Quicksand',\n    fontSize: 10,\n    axsis: {\n      tickColor: \"#6c516b\",\n      ticks: {\n        line: {\n          stroke: \"#6c516b\"\n        },\n        text: {\n          fill: \"#6c516b\"\n        }\n      }\n    },\n  },\n\n  margin: { top: 50, right: 20, bottom: 50, left: 20 },\n  colors: [ '#5B4059' ],\n  \n  enableGridX: false,\n  enableGridY: false,\n\n  xScale: {   \n    type: \"time\",\n    format: \"%I:%M:%S %p\",\n    precision: \"hour\", \n  },\n  xFormat: \"time:%I %p, %d %a\",\n  yScale:{\n      type: 'linear',\n      min: 'auto',\n      max: 'auto',\n      stacked: true,\n      reverse: false\n  },\n  curve: \"linear\",\n  yFormat: \" >-.2d\",\n\n  axisTop: null,\n  axisRight: null,\n  axisLeft: null,\n  axisBottom: {\n      orient: 'bottom',\n      format: '%I %p',\n      tickPadding: 5,\n  },\n\n  pointSize: 3,\n  pointColor: \"#5B4059\",\n  pointBorderWidth: 3,\n  pointBorderColor: \"#5B4059\",\n\n  pointLabelYOffset: -12,\n\n  useMesh: true,            //-------------------- mesh for mouse events\n  enableCrosshair: false,\n  //crosshairType: 'bottom',  //-------------------- type for dash lines\n  enableSlices: false,\n\n  layers: ['grid', 'markers', 'axes', 'areas', 'crosshair', 'lines', customPoint, 'slices', 'mesh', 'legends'],\n};\n\nexport default responsiveLineProps;","import React, { useState, useEffect } from 'react';\n\nconst DigitalClock = () => {\n  const [today, setToday] = useState(new Date());\n\n  const refreshClock = () => {\n    setToday(new Date());\n  };\n\n  useEffect(() => {\n    const timerId = setInterval(refreshClock, 1000);\n\n    return function cleanup() {\n      clearInterval(timerId);\n    };\n  }, []);\n\n  return (\n    <span className=\"w-150\">\n      {today.toLocaleString()}\n    </span>\n  );\n};\n  \nexport default DigitalClock;","import React, { useEffect, useState } from 'react';\nimport { connect } from 'react-redux';\nimport { ResponsiveLine } from '@nivo/line';\nimport {} from '@nivo/annotations';\nimport responsiveLineProps from '../utils/responsiveLineProps';\nimport { getIconURL } from '../utils/API';\nimport DigitalClock from './DigitalClock';\n\nconst HourlyChart = (props) => {\n  const { hourlyForecast, weather } = props;\n  const [chartDataNivo, setChartDataNivo] = useState([]);\n  const [chartSunset, setchartSunset] = useState(new Date(weather.sunset * 1000));\n  const [chartSunrise, setchartSunrise] = useState(new Date(weather.sunrise * 1000));\n\n  const getSunTime = () => {\n    if(chartSunset.getTime() < (new Date(hourlyForecast[0].dt)).getTime()) {\n      setchartSunset(new Date(dailyForecast[1].sunset * 1000));\n    }\n    \n    if(chartSunrise.getTime() > (new Date(hourlyForecast[23].dt)).getTime()) {\n      setchartSunrise(new Date(dailyForecast[1].sunset * 1000));\n    }\n  };\n\n  useEffect(() => {\n    if(hourlyForecast.length !== 0) {\n      const a = {\n        \"id\": \"temp\"\n      };\n  \n      const data = hourlyForecast.slice(0,24).map((elem, ind) => {\n        return {\n          x: (new Date(elem.dt * 1000)),\n          y: elem.temp,\n          iconSrc: elem.weather[0].icon,\n          iconAlt: elem.weather[0].description\n        }\n      });\n      setChartDataNivo([{...a, data}]);\n\n    }\n  }, [hourlyForecast]);\n\n  return (\n    hourlyForecast.length !== 0 && \n    <div className=\"hourly-chart-wrap\">\n      <div className=\"hourly-chart-title\">\n        <h6>Today</h6>\n        <DigitalClock />\n      </div>\n      <div className=\"hourly-chart\">\n        <ResponsiveLine\n          data={chartDataNivo}\n          tooltip={ ({ point }) => {\n            return (\n              <div className='hourly-chart-tooltip'>\n                <img \n                  className=\"w-h-50px\"\n                  src={getIconURL(point.data.iconSrc)} \n                  alt={point.data.iconAlt}>\n\n                </img>\n                <div>{point.data.yFormatted  + 'Â°'}</div>\n                <div>{point.data.xFormatted}</div>\n              </div>\n            )\n          }}\n          markers={[\n            {\n              axis: 'x',\n              value: new Date(weather.sunset * 1000),\n              lineStyle: { \n                stroke: '#FF6347', \n                strokeWidth: 1, \n              },\n              legend: `Sunset ${new Date(weather.sunset * 1000).toLocaleTimeString()}`,\n              legendOffsetX: -40,\n              legendOffsetY: -20,\n              textStyle: {\n                fill: '#6c516b',\n                fontSize: 10,\n              }\n            },\n            {\n              axis: 'x',\n              value:  new Date(weather.sunrise * 1000),\n              lineStyle: { \n                stroke: '#FFD700', \n                strokeWidth: 1, \n                fontFamily: 'Quicksand'\n              }, \n              legend: `Sunrise ${new Date(weather.sunrise * 1000).toLocaleTimeString()}`,\n              legendPosition: 'top-right',\n              legendOffsetX: -40,\n              legendOffsetY: -20,\n              textStyle: {\n                fill: '#6c516b',\n                fontSize: 10,\n                }\n            },\n          ]}\n          {...responsiveLineProps}\n        />\n      </div>\n      \n    </div>\n  );\n};\n\nconst mapStateToProps = (state) => {\n  return {\n    hourlyForecast: state.weatherData.hourlyForecast,\n    weather: state.weatherData.weather,\n  }\n}\n\nexport default connect(mapStateToProps)(HourlyChart);\n","const getIconURL = (iconName) => `https://openweathermap.org/img/wn/${iconName}@2x.png`;\n\nexport  { getIconURL };"],"names":["theme","fontFamily","fontSize","axsis","tickColor","ticks","line","stroke","text","fill","margin","top","right","bottom","left","colors","enableGridX","enableGridY","xScale","type","format","precision","xFormat","yScale","min","max","stacked","reverse","curve","yFormat","axisTop","axisRight","axisLeft","axisBottom","orient","tickPadding","pointSize","pointColor","pointBorderWidth","pointBorderColor","pointLabelYOffset","useMesh","enableCrosshair","enableSlices","layers","props","currentPoint","points","pointSymbol","map","point","ind","arr","dotShadow","length","r","strokeWidth","strokeOpacity","cx","x","cy","y","key","id","datum","data","symbol","size","color","borderWidth","borderColor","label","yFormatted","labelYOffset","useState","Date","today","setToday","refreshClock","useEffect","timerId","setInterval","clearInterval","className","toLocaleString","connect","state","hourlyForecast","weatherData","weather","chartDataNivo","setChartDataNivo","sunset","sunrise","slice","elem","dt","temp","iconSrc","icon","iconAlt","description","tooltip","src","getIconURL","alt","xFormatted","markers","axis","value","lineStyle","legend","toLocaleTimeString","legendOffsetX","legendOffsetY","textStyle","legendPosition","responsiveLineProps","iconName"],"sourceRoot":""}