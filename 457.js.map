{"version":3,"file":"457.js","mappings":"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","sources":["webpack://weather-forecast-frontend/./src/components/WeatherCard.js","webpack://weather-forecast-frontend/./src/components/Weather.js","webpack://weather-forecast-frontend/./src/utils/API.js","webpack://weather-forecast-frontend/./node_modules/classnames/index.js"],"sourcesContent":["import React, { useCallback, useEffect, useState, useContext } from 'react';\nimport { connect } from 'react-redux';\nimport { CARD_TYPE, MEASUREMENT, MEASUREMENT_SYSTEM } from './consts';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faArrowRightLong } from '@fortawesome/free-solid-svg-icons';\nimport MeasurementSystemContext from './context/MeasurementSystemContext';\nimport CityContext from './context/CityContext';\nimport { getIconURL } from '../utils/API';\nimport classNames from 'classnames';\n\nconst WeatherCard = (props) => {\n  const { weather, cardType, currCard } = props;\n  const { measureSystem } = useContext(MeasurementSystemContext);\n  const { cityAndParams } = useContext(CityContext);\n\n  let src = '';\n  let descr = '';\n  if (weather.length !== 0 && cardType === CARD_TYPE.icon) {\n    src = getIconURL(weather.weather[0].icon);\n    descr = weather.weather[0].description.toUpperCase();\n  }\n\n  const cardProps = useCallback((type, data) => {\n    const title = { title: cardType };\n    switch (type) {\n      case CARD_TYPE.temperature: {\n        return { ...title,\n          opts: [\n            <p key={1} className=\"weather-card-opts justify-content-center\">\n              <span className=\"weather-card-temperature\">\n                {Math.round(data?.temp)}&#xb0;\n                <span className=\"weather-card-measure\">{measureSystem === MEASUREMENT_SYSTEM.imperial ? MEASUREMENT.imperial.temp : MEASUREMENT.metric.temp}</span>\n              </span>\n            </p>,\n            <p key={2} className=\"weather-card-opts\">\n              <span>Feels like:</span>\n              <span>\n                {Math.round(data?.feels_like)}&#xb0;\n                <span className=\"weather-card-measure\">{measureSystem === MEASUREMENT_SYSTEM.imperial ? MEASUREMENT.imperial.temp : MEASUREMENT.metric.temp}</span>\n              </span>\n            </p>\n          ]\n        };\n      }\n      case CARD_TYPE.wind:\n        return { ...title,\n          opts: [\n            <p  key={3} className=\"weather-card-opts justify-content-center\">\n              <FontAwesomeIcon\n                className=\"wind-direction fa-rotate-by\"\n                icon={faArrowRightLong} \n                style={{\"--fa-rotate-angle\": `-${data?.wind_deg}deg`}}\n                size=\"3x\"\n              />\n            </p>,\n            <p key={4} className=\"weather-card-opts\">\n              <span>Speed:</span>\n              <span>\n                {data?.wind_speed}\n                <span className=\"weather-card-measure\">{measureSystem === MEASUREMENT_SYSTEM.imperial ? MEASUREMENT.imperial.windSpeed : MEASUREMENT.metric.windSpeed}</span>\n              </span>\n            </p>,\n            <p key={5} className=\"weather-card-opts\">\n              <span>Gust:</span>\n              <span>\n                { weather?.wind_gust || '-' }\n                <span className=\"weather-card-measure\">{measureSystem === MEASUREMENT_SYSTEM.imperial ? MEASUREMENT.imperial.windGust : MEASUREMENT.metric.windGust}</span>\n              </span>\n            </p>\n          ]\n        };\n      case CARD_TYPE.extra:\n        return { ...title,\n          opts: [\n            <p key={6} className=\"weather-card-opts\">\n                <span>Pressure:</span>\n                <span>\n                  {data?.pressure}\n                  <span className=\"weather-card-measure\">hPa</span>\n                </span>\n            </p>,\n            <p key={7} className=\"weather-card-opts\">\n              <span>Humidity:</span>\n              <span>\n                {data?.humidity}\n                <span className=\"weather-card-measure\">%</span>\n              </span>\n            </p>,\n            <p key={8} className=\"weather-card-opts\">\n              <span>Clouds:</span>\n              <span>\n                {data?.clouds}\n                <span className=\"weather-card-measure\">%</span>\n              </span>\n            </p>,\n            <p key={9} className=\"weather-card-opts\">\n              <span>Precipitation:</span>\n              <span>\n                {data?.rain?.['3h'] || data?.snow?.['3h'] || '-'}\n                <span className=\"weather-card-measure\">mm</span>\n              </span>\n            </p>\n          ]\n        };\n      default:\n        return;\n    }\n  }, []);\n  \n  const [cardOptions, setCardOptions] = useState(cardProps(cardType, weather));\n\n  useEffect(() => {\n    setCardOptions(cardProps(cardType, weather));\n  }, [cardType, weather, cardProps]);\n      \n  return (\n      <div className={classNames(\"row m-0\", { 'not-curr-item': cardType !== currCard })}>\n      <div className=\"col s12\">\n        <div className=\"card weather-card\">\n          {cardType === CARD_TYPE.icon ?\n            <>\n              <span className=\"card-title center\">{cityAndParams.name}</span>\n              <div className=\"card-content weather-icon\">\n                <img className=\"w-h-100\" src={src} alt={descr}></img>\n                <span className=\"f-w-600\">{descr}</span>\n              </div>\n            </>\n            : \n            <>\n              {cardOptions.title !== CARD_TYPE.temperature && \n                <span className=\"card-title center\">\n                  {cardOptions.title}\n                </span>\n              }\n              <div className=\"card-content\">\n                {cardOptions.opts.map(info => info)}\n              </div>\n            </> \n          }\n        </div>\n      </div>\n    </div>\n  );\n};\n\nconst mapStateToProps = (state) => {\n  return {\n    weather: state.weatherData.weather\n  }\n}\n\nexport default connect(mapStateToProps)(WeatherCard);","import React, { useState, useRef } from 'react';\nimport { CARD_TYPE } from './consts';\nimport WeatherCard from './WeatherCard';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faAngleLeft, faAngleRight } from '@fortawesome/free-solid-svg-icons';\nimport classNames from 'classnames';\n\nconst ARROW_DIRECTION = {\n  L: 'left',\n  R: 'right',\n  N: 'none'\n};\n\nconst Weather = () => {\n  const [currCard, setCurrCard] = useState(CARD_TYPE.icon);\n  const arrow = useRef(ARROW_DIRECTION.N);\n\n  const arrowsClick = () => {\n    const cardsArr = Object.keys(CARD_TYPE);\n    const currItemIndex = cardsArr.findIndex(item => CARD_TYPE[item] === currCard);\n\n    switch(arrow.current) {\n      case 'left': {\n        cardsArr[currItemIndex - 1] !== undefined ? setCurrCard(CARD_TYPE[cardsArr[currItemIndex - 1]]) : setCurrCard(CARD_TYPE[cardsArr[cardsArr.length - 1]]);\n\n        break;\n      }\n      case 'right': {\n        cardsArr[currItemIndex + 1] !== undefined ? setCurrCard(CARD_TYPE[cardsArr[currItemIndex + 1]]) : setCurrCard(CARD_TYPE[cardsArr[0]]);\n\n        break;\n      }\n      default: break;\n    }\n  };\n\n  const dotClick = (event) => {\n    setCurrCard(CARD_TYPE[event.target.id]);\n  };\n\n  return (\n    <div className=\"weather-cards-carousel\">\n      <div className=\"carousel-row\">\n        <div \n          className=\"carousel-arrow carousel-arrow-left\" \n          onClick={() => {\n          arrow.current = ARROW_DIRECTION.L;\n          arrowsClick();\n          }}\n        >\n          <FontAwesomeIcon \n            className=\"fa-solid\" \n            icon={faAngleLeft} \n            size={\"lg\"}\n          />\n        </div>\n        {Object.keys(CARD_TYPE).map((key) => {\n            return (\n              <WeatherCard \n                key={CARD_TYPE[key]} cardType={CARD_TYPE[key]} currCard={currCard}\n              ></WeatherCard>\n            );\n          })\n        }\n        <div \n          className=\"carousel-arrow carousel-arrow-right\" \n          onClick={() => {\n            arrow.current = ARROW_DIRECTION.R;\n            arrowsClick();\n          }}\n        >\n          <FontAwesomeIcon \n            className=\"fa-solid\" \n            icon={faAngleRight} \n            size={\"lg\"}\n          />\n        </div>\n      </div>\n      <div className=\"carousel-dots\">\n        {Object.keys(CARD_TYPE).map((item) => {\n          return (\n            <p \n              key={item} \n              id={item}\n              className={classNames(\"dot\", {\n                'active-dot': CARD_TYPE[item] === currCard })\n              }\n              onClick={dotClick}\n            >    \n            </p>\n          )\n        })}\n      </div>\n    </div>\n  )\n};\n\nexport default React.memo(Weather);","const getIconURL = (iconName) => `https://openweathermap.org/img/wn/${iconName}@2x.png`;\n\nexport  { getIconURL };","/*!\n  Copyright (c) 2018 Jed Watson.\n  Licensed under the MIT License (MIT), see\n  http://jedwatson.github.io/classnames\n*/\n/* global define */\n\n(function () {\n\t'use strict';\n\n\tvar hasOwn = {}.hasOwnProperty;\n\n\tfunction classNames() {\n\t\tvar classes = [];\n\n\t\tfor (var i = 0; i < arguments.length; i++) {\n\t\t\tvar arg = arguments[i];\n\t\t\tif (!arg) continue;\n\n\t\t\tvar argType = typeof arg;\n\n\t\t\tif (argType === 'string' || argType === 'number') {\n\t\t\t\tclasses.push(arg);\n\t\t\t} else if (Array.isArray(arg)) {\n\t\t\t\tif (arg.length) {\n\t\t\t\t\tvar inner = classNames.apply(null, arg);\n\t\t\t\t\tif (inner) {\n\t\t\t\t\t\tclasses.push(inner);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if (argType === 'object') {\n\t\t\t\tif (arg.toString === Object.prototype.toString) {\n\t\t\t\t\tfor (var key in arg) {\n\t\t\t\t\t\tif (hasOwn.call(arg, key) && arg[key]) {\n\t\t\t\t\t\t\tclasses.push(key);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tclasses.push(arg.toString());\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn classes.join(' ');\n\t}\n\n\tif (typeof module !== 'undefined' && module.exports) {\n\t\tclassNames.default = classNames;\n\t\tmodule.exports = classNames;\n\t} else if (typeof define === 'function' && typeof define.amd === 'object' && define.amd) {\n\t\t// register as 'classnames', consistent with npm package name\n\t\tdefine('classnames', [], function () {\n\t\t\treturn classNames;\n\t\t});\n\t} else {\n\t\twindow.classNames = classNames;\n\t}\n}());\n"],"names":["connect","state","weather","weatherData","props","cardType","currCard","measureSystem","useContext","MeasurementSystemContext","cityAndParams","CityContext","src","descr","length","CARD_TYPE","getIconURL","icon","description","toUpperCase","cardProps","useCallback","type","data","title","opts","key","className","Math","round","temp","MEASUREMENT_SYSTEM","MEASUREMENT","feels_like","faArrowRightLong","style","wind_deg","size","wind_speed","wind_gust","pressure","humidity","clouds","rain","snow","useState","cardOptions","setCardOptions","useEffect","classNames","name","alt","map","info","Weather","setCurrCard","arrow","useRef","arrowsClick","cardsArr","Object","keys","currItemIndex","findIndex","item","current","undefined","dotClick","event","target","id","onClick","faAngleLeft","faAngleRight","React","iconName","hasOwn","hasOwnProperty","classes","i","arguments","arg","argType","push","Array","isArray","inner","apply","toString","prototype","call","join","module","exports","default"],"sourceRoot":""}