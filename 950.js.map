{"version":3,"file":"950.js","mappings":"mOAKMA,EAAe,SAACC,GAAU,QACtBC,EAAaD,EAAbC,SAEAC,GAAkBC,EAAAA,EAAAA,YAAWC,EAAAA,GAA7BF,cAER,GAA8BG,EAAAA,EAAAA,UAAS,IAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KACA,GAA8BF,EAAAA,EAAAA,UAAS,IAAvC,eAAOG,EAAP,KAAgBC,EAAhB,KAWA,OATAC,EAAAA,EAAAA,YAAU,WACLT,IACDM,GAAWI,EAAAA,EAAAA,GAAWV,EAASW,QAAQ,GAAGC,OAC1CJ,EAAWR,EAASW,QAAQ,GAAGE,gBAEhC,CAACb,IAKF,uBAAKc,UAAU,OACb,uBAAKA,UAAU,WACb,uBAAKA,UAAU,sBACb,uBAAKA,UAAU,UAAUC,IAAKV,EAASW,IAAKT,IAC5C,sBAAIO,UAAU,UAAUG,MAAO,CAACC,OAAQ,IACvCC,KAAKC,MAAMpB,MAAAA,GAAX,UAAWA,EAAUqB,YAArB,aAAW,EAAgBC,KAD5B,MACqCH,KAAKC,MAAMpB,MAAAA,GAAX,UAAWA,EAAUqB,YAArB,aAAW,EAAgBE,KADhE,KAEM,wBAAMT,UAAU,yBACbb,IAAkBuB,EAAAA,GAAAA,SAA8BC,EAAAA,GAAAA,SAAAA,KAA4BA,EAAAA,GAAAA,OAAAA,OAGrF,sBAAIX,UAAU,WAAY,IAAIY,KAAoB,KAAf1B,MAAAA,OAAA,EAAAA,EAAU2B,KAAYC,mBAAmB,QAAS,CAACC,QAAS,cAOzG,QAAeC,EAAAA,KAAWhC,GCnB1B,GAAeiC,EAAAA,EAAAA,KANS,SAACC,GACvB,MAAO,CACLC,cAAeD,EAAME,YAAYD,iBAIrC,EAjBiB,SAAClC,GAChB,IAAQkC,EAAkBlC,EAAlBkC,cAER,OAAO,uBAAKnB,UAAU,uBACpB,sBAAIA,UAAU,yBAAd,mBACCmB,EAAcE,MAAM,EAAG,GAAGC,KAAI,SAACC,GAC5B,OAAO,gBAAC,EAAD,CAAcC,IAAKD,EAAKV,GAAI3B,SAAUqC,Y,gCCVrD,IAAM3B,EAAa,SAAC6B,GAAD,kDAAmDA,EAAnD","sources":["webpack://weather-forecast-frontend/./src/components/ForecastCard.js","webpack://weather-forecast-frontend/./src/components/Forecast.js","webpack://weather-forecast-frontend/./src/utils/API.js"],"sourcesContent":["import React, { useState, useEffect, useContext } from 'react';\nimport { getIconURL } from '../utils/API';\nimport { MEASUREMENT_SYSTEM, MEASUREMENT } from './consts';\nimport MeasurementSystemContext from './context/MeasurementSystemContext';\n\nconst ForecastCard = (props) => {\n  const { forecast } = props;\n\n  const { measureSystem } = useContext(MeasurementSystemContext); \n\n  const [iconSrc, setIconSrc] = useState('');\n  const [iconAlt, setIconAlt] = useState('');\n\n  useEffect(() => {\n    if(forecast) {\n      setIconSrc(getIconURL(forecast.weather[0].icon));\n      setIconAlt(forecast.weather[0].description);\n    }\n  }, [forecast]);\n\n  // const descr = forecast.weather[0].description.toUpperCase();\n\n  return (\n    <div className=\"row\">\n      <div className=\"col s12\">\n        <div className=\"card forecast-card\">\n          <img className=\"w-h-100\" src={iconSrc} alt={iconAlt}></img>\n          <h5 className=\"f-w-600\" style={{margin: 0}}>\n          {Math.round(forecast?.temp?.min)} / {Math.round(forecast?.temp?.max)} &#xb0;\n                <span className=\"forecast-card-measure\">\n                  {measureSystem === MEASUREMENT_SYSTEM.imperial ? MEASUREMENT.imperial.temp : MEASUREMENT.metric.temp}\n                </span>\n                </h5>\n          <h6 className=\"f-w-600\">{(new Date(forecast?.dt * 1000)).toLocaleDateString('en-US', {weekday: 'long'})}</h6>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default React.memo(ForecastCard);","import React from 'react';\nimport { connect } from 'react-redux';\nimport ForecastCard from './ForecastCard';\n\nconst Forecast = (props) => {\n  const { dailyForecast } = props;\n\n  return <div className=\"forecast-cards-wrap\">\n    <h4 className=\"weekly-forecast-title\">Weekly Forecast</h4>\n    {dailyForecast.slice(0, 7).map((elem) => {\n        return <ForecastCard key={elem.dt} forecast={elem}></ForecastCard>\n    })}\n  </div>\n};\n\nconst mapStateToProps = (state) => {\n  return {\n    dailyForecast: state.weatherData.dailyForecast\n  }\n};\n  \nexport default connect(mapStateToProps)(Forecast);","const getIconURL = (iconName) => `https://openweathermap.org/img/wn/${iconName}@2x.png`;\n\nexport  { getIconURL };"],"names":["ForecastCard","props","forecast","measureSystem","useContext","MeasurementSystemContext","useState","iconSrc","setIconSrc","iconAlt","setIconAlt","useEffect","getIconURL","weather","icon","description","className","src","alt","style","margin","Math","round","temp","min","max","MEASUREMENT_SYSTEM","MEASUREMENT","Date","dt","toLocaleDateString","weekday","React","connect","state","dailyForecast","weatherData","slice","map","elem","key","iconName"],"sourceRoot":""}